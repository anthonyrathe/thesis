# +-------------------------------+
# |         Wall of Fame          |
# +-------------------------------+
# |        0 transaction fee      |
# +-------------------------------+

window = 1
StackedEnvDiff
first_layer_input_fields = ['EV/EBITDA','P/E','P/B','D/E','Bias_EV/EBITDA_60','Bias_Price_28','R_Price']
second_layer_input_fields = ['EV/EBITDA','P/E','P/B','D/E']
peer_normalize = ['EV/EBITDA','P/E','P/B','D/E', 'Bias_EV/EBITDA_60','Bias_Price_28','R_Price']
normalize = peer_normalize
"test_step_size_5_1"
policy = SharedStackedPolicy
net_arch=[40,10,'merge',30,dict(pi=[20,group_count*group_size+int(include_cash)],vf=[5])]
test_step_size_5_1_log_0_group_0

--------

window = 1
StackedEnvDiff
first_layer_input_fields = ['EV/EBITDA','P/E','P/B','D/E','Bias_EV/EBITDA_60','Bias_Price_28','R_Price']
second_layer_input_fields = ['EV/EBITDA','P/E','P/B','D/E']
peer_normalize = ['EV/EBITDA','P/E','P/B','D/E', 'Bias_EV/EBITDA_60','Bias_Price_28','R_Price']
normalize = peer_normalize
"test_step_size_5_2"
policy = SharedStackedPolicy
net_arch=[40,10,'merge',30,dict(pi=[20,group_count*group_size+int(include_cash)],vf=[5])]
test_step_size_5_2_log_1_group_0

--------

window = 1
StackedEnvDiff
first_layer_input_fields = ['EV/EBITDA','P/E','P/B','D/E','Bias_EV/EBITDA_60','Bias_Price_28','R_Price']
second_layer_input_fields = ['EV/EBITDA','P/E','P/B','D/E']
peer_normalize = ['EV/EBITDA','P/E','P/B','D/E', 'Bias_EV/EBITDA_60','Bias_Price_28','R_Price']
normalize = peer_normalize
"test_step_size_5_3"
policy = SharedStackedPolicy
net_arch=[40,10,'merge',30,dict(pi=[20,group_count*group_size+int(include_cash)],vf=[5])]
test_step_size_5_3_log_1_group_0

--------

window = 1
StackedEnvDiff
first_layer_input_fields = ['EV/EBITDA','P/E','P/B','D/E','Bias_EV/EBITDA_60','Bias_Price_28','R_Price']
second_layer_input_fields = ['EV/EBITDA','P/E','P/B','D/E']
peer_normalize = ['EV/EBITDA','P/E','P/B','D/E', 'Bias_EV/EBITDA_60','Bias_Price_28','R_Price']
normalize = peer_normalize
"test_step_size_5_4"
policy = SharedStackedPolicy
net_arch=[40,10,'merge',30,dict(pi=[20,group_count*group_size+int(include_cash)],vf=[5])]
test_step_size_5_4_log_1_group_0

--------

window = 1
StackedEnvDiff
first_layer_input_fields = ['EV/EBITDA','P/E','P/B','D/E','Bias_EV/EBITDA_60','Bias_Price_28','R_Price']
second_layer_input_fields = ['EV/EBITDA','P/E','P/B','D/E']
peer_normalize = ['EV/EBITDA','P/E','P/B','D/E', 'Bias_EV/EBITDA_60','Bias_Price_28','R_Price']
normalize = peer_normalize
"test_step_size_5_5"
policy = SharedStackedPolicy
net_arch=[40,10,'merge',30,dict(pi=[20,group_count*group_size+int(include_cash)],vf=[5])]
test_step_size_5_5_log_1_group_0
    --> Actually didn't perform well at all

--------

window = 1
StackedEnvDiff
first_layer_input_fields = ['EV/EBITDA','P/E','P/B','D/E','Bias_EV/EBITDA_60','Bias_Price_28','R_Price']
second_layer_input_fields = ['EV/EBITDA','P/E','P/B','D/E']
peer_normalize = ['EV/EBITDA','P/E','P/B','D/E', 'Bias_EV/EBITDA_60','Bias_Price_28','R_Price']
normalize = peer_normalize
"test_step_size_5_6"
policy = SharedStackedPolicy
net_arch=[40,10,'merge',30,dict(pi=[20,group_count*group_size+int(include_cash)],vf=[5])]
test_step_size_5_6_log_1_group_0

--------

window = 1
StackedEnvDiff
first_layer_input_fields = ['EV/EBITDA','P/E','P/B','D/E','Bias_EV/EBITDA_60','Bias_Price_28','R_Price']
second_layer_input_fields = ['EV/EBITDA','P/E','P/B','D/E']
peer_normalize = ['EV/EBITDA','P/E','P/B','D/E', 'Bias_EV/EBITDA_60','Bias_Price_28','R_Price']
normalize = peer_normalize
"test_step_size_5_7"
policy = SharedStackedPolicy
net_arch=[40,10,'merge',30,dict(pi=[20,group_count*group_size+int(include_cash)],vf=[5])]
test_step_size_5_7_log_1_group_0
    --> Actually didn't perform well at all

--------

window = 1
StackedEnvDiff
first_layer_input_fields = ['EV/EBITDA','P/E','P/B','D/E','Bias_EV/EBITDA_60','Bias_Price_28','R_Price']
second_layer_input_fields = ['EV/EBITDA','P/E','P/B','D/E']
peer_normalize = ['EV/EBITDA','P/E','P/B','D/E', 'Bias_EV/EBITDA_60','Bias_Price_28','R_Price']
normalize = peer_normalize
"test_step_size_5_8"
policy = SharedStackedPolicy
net_arch=[40,10,'merge',30,dict(pi=[20,group_count*group_size+int(include_cash)],vf=[5])]
test_step_size_5_8_log_1_group_0

--------

# This agent was obtained after training and pre-training on all 8 3-peer-group sets of stocks
# Every run performed one or two training and pre-training cycles (depending on
#   the results obtained on those peer groups), 10 000 timesteps and 100 epochs each

window = 1
StackedEnvDiff
first_layer_input_fields = ['EV/EBITDA','P/E','P/B','D/E','Bias_EV/EBITDA_60','Bias_Price_28','R_Price']
second_layer_input_fields = ['EV/EBITDA','P/E','P/B','D/E']
peer_normalize = ['EV/EBITDA','P/E','P/B','D/E', 'Bias_EV/EBITDA_60','Bias_Price_28','R_Price']
normalize = peer_normalize
"golden_agent_0"
policy = SharedStackedPolicy
net_arch=[40,10,'merge',30,dict(pi=[20,group_count*group_size+int(include_cash)],vf=[5])]
golden_agent_0_log_1_group_<n> for n=0:7

--------

# This agent was obtained after training and pre-training on the full 24-peer-group set of stocks
# One training and pre-training cycle was performed of 10 000 timesteps and 100 epochs

window = 1
StackedEnvDiff
first_layer_input_fields = ['EV/EBITDA','P/E','P/B','D/E','Bias_EV/EBITDA_60','Bias_Price_28','R_Price']
second_layer_input_fields = ['EV/EBITDA','P/E','P/B','D/E']
peer_normalize = ['EV/EBITDA','P/E','P/B','D/E', 'Bias_EV/EBITDA_60','Bias_Price_28','R_Price']
normalize = peer_normalize
"golden_agent_all_groups_0"
policy = SharedStackedPolicy
net_arch=[40,10,'merge',150,dict(pi=[40,group_count*group_size+int(include_cash)],vf=[10])]
golden_agent_all_groups_0_log_0_group_0

--------

# This agent was obtained after training and pre-training golden_agent_all_groups_0
#   on the full 24-peer-group set of stocks
# One training and pre-training cycle was performed of 10 000 timesteps and 100 epochs
#   for a total of 20 000 timesteps and 200 epochs

window = 1
StackedEnvDiff
first_layer_input_fields = ['EV/EBITDA','P/E','P/B','D/E','Bias_EV/EBITDA_60','Bias_Price_28','R_Price']
second_layer_input_fields = ['EV/EBITDA','P/E','P/B','D/E']
peer_normalize = ['EV/EBITDA','P/E','P/B','D/E', 'Bias_EV/EBITDA_60','Bias_Price_28','R_Price']
normalize = peer_normalize
"golden_agent_all_groups_1"
policy = SharedStackedPolicy
net_arch=[40,10,'merge',150,dict(pi=[40,group_count*group_size+int(include_cash)],vf=[10])]
golden_agent_all_groups_1_log_0_group_0

2019-12-31 00:00:00: 71.31% VS 50.31% base profit
Sharpe: 1.1507992526613522 VS 0.944786608497322 base
CAGR: 0.1018002196126746 VS 0.07615624512855623 base
MDD: -0.2261175322232193 VS -0.2719247213038428 base
Calmar: 0.4502093164194769 VS 0.28006370573222317 base

-> Very interesting: agent seems to select only a few (if any) stocks per peer group to invest in
    and maintains fairly stable holdings

--------

# This agent was obtained after training and pre-training golden_agent_all_groups_1
#   on the full 24-peer-group set of stocks
# One training and pre-training cycle was performed of 10 000 timesteps and 100 epochs
#   for a total of 30 000 timesteps and 300 epochs

window = 1
StackedEnvDiff
first_layer_input_fields = ['EV/EBITDA','P/E','P/B','D/E','Bias_EV/EBITDA_60','Bias_Price_28','R_Price']
second_layer_input_fields = ['EV/EBITDA','P/E','P/B','D/E']
peer_normalize = ['EV/EBITDA','P/E','P/B','D/E', 'Bias_EV/EBITDA_60','Bias_Price_28','R_Price']
normalize = peer_normalize
"golden_agent_all_groups_2"
policy = SharedStackedPolicy
net_arch=[40,10,'merge',150,dict(pi=[40,group_count*group_size+int(include_cash)],vf=[10])]
golden_agent_all_groups_2_log_0_group_0

2019-12-31 00:00:00: 44.79% VS 50.31% base profit
Sharpe: 0.7340391110426802 VS 0.944786608497322 base
CAGR: 0.0689344925668971 VS 0.07615624512855623 base
MDD: -0.2699922405398628 VS -0.2719247213038428 base
Calmar: 0.255320273016214 VS 0.28006370573222317 base

-> Actually doesn't perform that well at all

--------

# This agent was obtained after training and pre-training golden_agent_all_groups_2
#   on the full 24-peer-group set of stocks
# One training and pre-training cycle was performed of 10 000 timesteps and 200 epochs
#   for a total of 40 000 timesteps and 500 epochs

window = 1
StackedEnvDiff
first_layer_input_fields = ['EV/EBITDA','P/E','P/B','D/E','Bias_EV/EBITDA_60','Bias_Price_28','R_Price']
second_layer_input_fields = ['EV/EBITDA','P/E','P/B','D/E']
peer_normalize = ['EV/EBITDA','P/E','P/B','D/E', 'Bias_EV/EBITDA_60','Bias_Price_28','R_Price']
normalize = peer_normalize
"golden_agent_all_groups_3"
policy = SharedStackedPolicy
net_arch=[40,10,'merge',150,dict(pi=[40,group_count*group_size+int(include_cash)],vf=[10])]
golden_agent_all_groups_3_log_0_group_0

2019-12-31 00:00:00: 73.43% VS 50.31% base profit
Sharpe: 1.1370161090537927 VS 0.944786608497322 base
CAGR: 0.10424495516131738 VS 0.07615624512855623 base
MDD: -0.22331643857691863 VS -0.2719247213038428 base
Calmar: 0.4668037687938117 VS 0.28006370573222317 base

--------

# This agent was obtained after training and pre-training golden_agent_all_groups_3
#   on the full 24-peer-group set of stocks
# One training and pre-training cycle was performed of 10 000 timesteps and 200 epochs
#   for a total of 50 000 timesteps and 700 epochs

window = 1
StackedEnvDiff
first_layer_input_fields = ['EV/EBITDA','P/E','P/B','D/E','Bias_EV/EBITDA_60','Bias_Price_28','R_Price']
second_layer_input_fields = ['EV/EBITDA','P/E','P/B','D/E']
peer_normalize = ['EV/EBITDA','P/E','P/B','D/E', 'Bias_EV/EBITDA_60','Bias_Price_28','R_Price']
normalize = peer_normalize
"golden_agent_all_groups_4"
policy = SharedStackedPolicy
net_arch=[40,10,'merge',150,dict(pi=[40,group_count*group_size+int(include_cash)],vf=[10])]
golden_agent_all_groups_4_log_0_group_0

2019-12-31 00:00:00: 76.02% VS 50.31% base profit
Sharpe: 1.1455305298626046 VS 0.944786608497322 base
CAGR: 0.10720567876780218 VS 0.07615624512855623 base
MDD: -0.2409337315428054 VS -0.2719247213038428 base
Calmar: 0.4449591930582602 VS 0.28006370573222317 base

----------------------------------------------------------------------------
^^      All agents above this line were trained on flawed input data      ^^
----------------------------------------------------------------------------

transaction_cost = 0.00000000001
window = 1
StackedEnvDiff
first_layer_input_fields = ['EV/EBITDA','P/E','P/B','D/E','Bias_EV/EBITDA_60','Bias_Price_28','R_Price']
second_layer_input_fields = ['EV/EBITDA','P/E','P/B','D/E']
peer_normalize = ['EV/EBITDA','P/E','P/B','D/E']
normalize = peer_normalize
"test_2"
policy = SharedStackedPolicy
net_arch=[40,10,'merge',150,dict(pi=[40,group_count*group_size+int(include_cash)],vf=[10])]
test_2_log_0_group_n.csv for n=0:7

--------
# This is a set of agents, obtained by training the following agent for 10 000 timesteps and 100 epochs
# (non-ultimate expert) on one set of three peer groups. Then the performance was tested on that set of peer groups.
# The 'base' agent test_subset_features_9 was obtained by training for 10 000 timesteps and 100 epochs
# (non-ultimate expert) on 5 permutations of each of 8 sets of peer groups.

transaction_cost = 0.00000000001
window = 1
StackedEnvDiff
first_layer_input_fields = ['EV/EBITDA','P/E','P/B','D/E','net_margin','EBITDA_margin','P/FCF','D/A','ROE','QOE_adjusted','EBITDA_CAGR_3y_to_EV/EBITDA','EV/EBITDA_KAMA_ratio_adjusted']
second_layer_input_fields = ['tax_rate']
peer_normalize = fundamentals_1 + fundamentals_derived_1 + fundamentals_derived_2 + fundamentals_derived_3
portfolio_normalize = doubles
z_score_normalize = []
min_max_normalize = fundamentals_1 + fundamentals_derived_1 + fundamentals_derived_2
"test_subset_features_9"/"test_subset_features"
net_arch=[60,10,'merge',50,dict(pi=[40,group_count*group_size+int(include_cash)],vf=[10])]
test_subset_features_log_n_group_0 for n=0:7

Win-ratio: 75.0%
Draw-ratio: 12.5%
Loss-ratio: 12.5%